/*styling star rating*/
.star{
	border: none;
	float: left;
}

.star > input{
	display: none;
}

.star > label:before{
	content: '\f005';
	font-family: FontAwesome;
	margin: 5px;
	font-size: 1.5rem;
	display: inline-block;
	cursor: pointer;
}

.star > .half:before{
	content: '\f089';
	position: absolute;
	cursor: pointer;
}


.star > label{
	color: #ddd;
	float: right;
	cursor: pointer;
}

.star > input:checked ~ label,
.star:not(:checked) > label:hover, 
.star:not(:checked) > label:hover ~ label{
	color: #2ce679;
}

.star > input:checked + label:hover,
.star > input:checked ~ label:hover,
.star > label:hover ~ input:checked ~ label,
.star > input:checked ~ label:hover ~ label{
	color: #2ddc76;
}



          {/* <input type="radio" id="star5" name="rating" value="5" />
          <label htmlFor="star5" class="full" title="Awesome"></label>
          <input type="radio" id="star4.5" name="rating" value="4.5" />
          <label htmlFor="star4.5" class="half"></label>
          <input type="radio" id="star4" name="rating" value="4" />
          <label htmlFor="star4" class="full"></label>
          <input type="radio" id="star3.5" name="rating" value="3.5" />
          <label htmlFor="star3.5" class="half"></label>
          <input type="radio" id="star3" name="rating" value="3" />
          <label htmlFor="star3" class="full"></label>
          <input type="radio" id="star2.5" name="rating" value="2.5" />
          <label htmlFor="star2.5" class="half"></label>
          <input type="radio" id="star2" name="rating" value="2" />
          <label htmlFor="star2" class="full"></label>
          <input type="radio" id="star1.5" name="rating" value="1.5" />
          <label htmlFor="star1.5" class="half"></label>
          <input type="radio" id="star1" name="rating" value="1" />
          <label htmlFor="star1" class="full"></label>
          <input type="radio" id="star0.5" name="rating" value="0.5" />
          <label htmlFor="star0.5" class="half"></label>
          <input type="hidden" name="score" value={rate} /> */}


		  
          {/* {[1, 2, 3, 4, 5].map((num) => (
            <>
              <img
                key={num}
                src="//st.nhattruyenss.com/Data/Sites/1/skins/comic/images/star-on.png"
                alt="1"
                title="bad"
              />
              &nbsp;
            </>
          ))} */}


**********************************************************************
!function(t) {
    var e = {
        init: function(n) {
            return this.each((function() {
                var o = this
                  , a = t(o).empty();
                o.opt = t.extend(!0, {}, t.fn.raty.defaults, n),
                a.data("settings", o.opt),
                o.opt.number = e.between(o.opt.number, 0, 20),
                "/" != o.opt.path.substring(o.opt.path.length - 1, o.opt.path.length) && (o.opt.path += "/"),
                "function" == typeof o.opt.score && (o.opt.score = o.opt.score.call(o)),
                o.opt.score && (o.opt.score = e.between(o.opt.score, 0, o.opt.number));
                for (var i = 1; i <= o.opt.number; i++)
                    t("<img />", {
                        src: o.opt.path + (!o.opt.score || o.opt.score < i ? o.opt.starOff : o.opt.starOn),
                        alt: i,
                        title: i <= o.opt.hints.length && null !== o.opt.hints[i - 1] ? o.opt.hints[i - 1] : i
                    }).appendTo(o),
                    o.opt.space && a.append(i < o.opt.number ? "&#160;" : "");
                o.stars = a.children('img:not(".raty-cancel")'),
                o.score = t("<input />", {
                    type: "hidden",
                    name: o.opt.scoreName
                }).appendTo(o),
                o.opt.score && o.opt.score > 0 && (o.score.val(o.opt.score),
                e.roundStar.call(o, o.opt.score)),
                o.opt.iconRange && e.fill.call(o, o.opt.score),
                e.setTarget.call(o, o.opt.score, o.opt.targetKeep);
                var c = o.opt.space ? 4 : 0;
                o.opt.width || (o.opt.number,
                o.opt.size,
                o.opt.number);
                o.opt.cancel && (o.cancel = t("<img />", {
                    src: o.opt.path + o.opt.cancelOff,
                    alt: "x",
                    title: o.opt.cancelHint,
                    class: "raty-cancel"
                }),
                "left" == o.opt.cancelPlace ? a.prepend("&#160;").prepend(o.cancel) : a.append("&#160;").append(o.cancel),
                o.opt.size),
                o.opt.readOnly ? (e.fixHint.call(o),
                o.cancel && o.cancel.hide()) : (a.css("cursor", "pointer"),
                e.bindAction.call(o))
            }
            ))
        },
        between: function(t, e, n) {
            return Math.min(Math.max(parseFloat(t), e), n)
        },
        bindAction: function() {
            var n = this
              , o = t(n);
            o.mouseleave((function() {
                var t = n.score.val() || void 0;
                e.initialize.call(n, t),
                e.setTarget.call(n, t, n.opt.targetKeep),
                n.opt.mouseover && n.opt.mouseover.call(n, t)
            }
            ));
            var a = n.opt.half ? "mousemove" : "mouseover";
            n.opt.cancel && n.cancel.mouseenter((function() {
                t(this).attr("src", n.opt.path + n.opt.cancelOn),
                n.stars.attr("src", n.opt.path + n.opt.starOff),
                e.setTarget.call(n, null, !0),
                n.opt.mouseover && n.opt.mouseover.call(n, null)
            }
            )).mouseleave((function() {
                t(this).attr("src", n.opt.path + n.opt.cancelOff),
                n.opt.mouseover && n.opt.mouseover.call(n, n.score.val() || null)
            }
            )).click((function(t) {
                n.score.removeAttr("value"),
                n.opt.click && n.opt.click.call(n, null, t)
            }
            )),
            n.stars.bind(a, (function(a) {
                var i = parseInt(this.alt, 10);
                if (n.opt.half) {
                    var c = parseFloat((a.pageX - t(this).offset().left) / n.opt.size)
                      , s = c > .5 ? 1 : .5;
                    i = parseFloat(this.alt) - 1 + s,
                    e.fill.call(n, i),
                    n.opt.precision && (i = i - s + c),
                    e.showHalf.call(n, i)
                } else
                    e.fill.call(n, i);
                o.data("score", i),
                e.setTarget.call(n, i, !0),
                n.opt.mouseover && n.opt.mouseover.call(n, i, a)
            }
            )).click((function(t) {
                n.score.val(n.opt.half || n.opt.precision ? o.data("score") : this.alt),
                n.opt.click && n.opt.click.call(n, n.score.val(), t)
            }
            ))
        },
        cancel: function(n) {
            return t(this).each((function() {
                var o = this;
                if (!0 === t(o).data("readonly"))
                    return this;
                n ? e.click.call(o, null) : e.score.call(o, null),
                o.score.removeAttr("value")
            }
            ))
        },
        click: function(n) {
            return t(this).each((function() {
                if (!0 === t(this).data("readonly"))
                    return this;
                e.initialize.call(this, n),
                this.opt.click ? this.opt.click.call(this, n) : e.error.call(this, 'you must add the "click: function(score, evt) { }" callback.'),
                e.setTarget.call(this, n, !0)
            }
            ))
        },
        error: function(e) {
            t(this).html(e),
            t.error(e)
        },
        fill: function(t) {
            for (var e, n, o, a = this, i = a.stars.length, c = 0, s = 1; s <= i; s++)
                e = a.stars.eq(s - 1),
                a.opt.iconRange && a.opt.iconRange.length > c ? (n = a.opt.iconRange[c],
                o = a.opt.single ? s == t ? n.on || a.opt.starOn : n.off || a.opt.starOff : s <= t ? n.on || a.opt.starOn : n.off || a.opt.starOff,
                s <= n.range && e.attr("src", a.opt.path + o),
                s == n.range && c++) : (o = a.opt.single ? s == t ? a.opt.starOn : a.opt.starOff : s <= t ? a.opt.starOn : a.opt.starOff,
                e.attr("src", a.opt.path + o))
        },
        fixHint: function() {
            var e = t(this)
              , n = parseInt(this.score.val(), 10)
              , o = this.opt.noRatedMsg;
            !isNaN(n) && n > 0 && (o = n <= this.opt.hints.length && null !== this.opt.hints[n - 1] ? this.opt.hints[n - 1] : n),
            e.data("readonly", !0).css("cursor", "default").attr("title", o),
            this.score.attr("readonly", "readonly"),
            this.stars.attr("title", o)
        },
        getScore: function() {
            var e, n = [];
            return t(this).each((function() {
                e = this.score.val(),
                n.push(e ? parseFloat(e) : void 0)
            }
            )),
            n.length > 1 ? n : n[0]
        },
        readOnly: function(n) {
            return this.each((function() {
                var o = t(this);
                if (o.data("readonly") === n)
                    return this;
                this.cancel && (n ? this.cancel.hide() : this.cancel.show()),
                n ? (o.unbind(),
                o.children("img").unbind(),
                e.fixHint.call(this)) : (e.bindAction.call(this),
                e.unfixHint.call(this)),
                o.data("readonly", n)
            }
            ))
        },
        reload: function() {
            return e.set.call(this, {})
        },
        roundStar: function(t) {
            var e = (t - Math.floor(t)).toFixed(2);
            if (e > this.opt.round.down) {
                var n = this.opt.starOn;
                e < this.opt.round.up && this.opt.halfShow ? n = this.opt.starHalf : e < this.opt.round.full && (n = this.opt.starOff),
                this.stars.eq(Math.ceil(t) - 1).attr("src", this.opt.path + n)
            }
        },
        score: function() {
            return arguments.length ? e.setScore.apply(this, arguments) : e.getScore.call(this)
        },
        set: function(e) {
            return this.each((function() {
                var n = t(this)
                  , o = n.data("settings")
                  , a = n.clone().removeAttr("style").insertBefore(n);
                n.remove(),
                a.raty(t.extend(o, e))
            }
            )),
            t(this.selector)
        },
        setScore: function(n) {
            return t(this).each((function() {
                if (!0 === t(this).data("readonly"))
                    return this;
                e.initialize.call(this, n),
                e.setTarget.call(this, n, !0)
            }
            ))
        },
        setTarget: function(n, o) {
            if (this.opt.target) {
                var a = t(this.opt.target);
                0 == a.length && e.error.call(this, "target selector invalid or missing!");
                var i = n;
                i = o && void 0 !== i ? "hint" == this.opt.targetType ? null === i && this.opt.cancel ? this.opt.cancelHint : this.opt.hints[Math.ceil(i - 1)] : this.opt.precision ? parseFloat(i).toFixed(1) : parseInt(i, 10) : this.opt.targetText,
                this.opt.targetFormat.indexOf("{score}") < 0 && e.error.call(this, 'template "{score}" missing!'),
                null !== n && (i = this.opt.targetFormat.toString().replace("{score}", i)),
                a.is(":input") ? a.val(i) : a.html(i)
            }
        },
        showHalf: function(t) {
            var e = (t - Math.floor(t)).toFixed(1);
            e > 0 && e < .6 && this.stars.eq(Math.ceil(t) - 1).attr("src", this.opt.path + this.opt.starHalf)
        },
        initialize: function(t) {
            t = t ? e.between(t, 0, this.opt.number) : 0,
            e.fill.call(this, t),
            t > 0 && (this.opt.halfShow && e.roundStar.call(this, t),
            this.score.val(t))
        },
        unfixHint: function() {
            for (var e = 0; e < this.opt.number; e++)
                this.stars.eq(e).attr("title", e < this.opt.hints.length && null !== this.opt.hints[e] ? this.opt.hints[e] : e);
            t(this).data("readonly", !1).css("cursor", "pointer").removeAttr("title"),
            this.score.attr("readonly", "readonly")
        }
    };
    t.fn.raty = function(n) {
        return e[n] ? e[n].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof n && n ? void t.error("Method " + n + " does not exist!") : e.init.apply(this, arguments)
    }
    ,
    t.fn.raty.defaults = {
        cancel: !1,
        cancelHint: "cancel this rating!",
        cancelOff: "cancel-off.png",
        cancelOn: "cancel-on.png",
        cancelPlace: "left",
        click: void 0,
        half: !1,
        halfShow: !0,
        hints: ["bad", "poor", "regular", "good", "gorgeous"],
        iconRange: void 0,
        mouseover: void 0,
        noRatedMsg: "not rated yet",
        number: 5,
        path: "img/",
        precision: !1,
        round: {
            down: .25,
            full: .6,
            up: .76
        },
        readOnly: !1,
        score: void 0,
        scoreName: "score",
        single: !1,
        size: 16,
        space: !0,
        starHalf: "star-half.png",
        starOff: "star-off.png",
        starOn: "star-on.png",
        target: void 0,
        targetFormat: "{score}",
        targetKeep: !1,
        targetText: "",
        targetType: "hint"
    }
}(jQuery),


() => handleMouseOver(value)


{/* <div
          className="star"
          data-rating={rate}
          data-allowrating="true"
          style={{ cursor: "pointer" }}
        >
          {[...Array(10)].map((_, index) => {
            const value = index + 1;
            return (
              <span
                className={`${value % 2 === 1 ? "absolute" : ""}`}
                key={value}
                style={{ cursor: "pointer" }}
                onMouseOver={() => handleMouseOver(value)}
                onMouseLeave={handleMouseLeave}
                onClick={() => handleClick(value)}
              >
                {value <= (hoverRating || rating) ? (
                  value % 2 === 1 ? (
                    <img
                      src="//st.nhattruyenss.com/Data/Sites/1/skins/comic/images/star-half.png"
                      alt={value}
                      title={value}
                    />
                  ) : (
                    <img
                      src="//st.nhattruyenss.com/Data/Sites/1/skins/comic/images/star-on.png"
                      alt={value}
                      title={value}
                    />
                  )
                ) : (
                  <img
                    src="//st.nhattruyenss.com/Data/Sites/1/skins/comic/images/star-off.png"
                    alt={value}
                    title={value}
                  />
                )}
              </span>
            );
          })}
        </div> */}